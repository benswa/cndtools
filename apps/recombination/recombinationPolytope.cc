/* Copyright (c) 2006
   Colin Dewey (University of Wisconsin-Madison)
   cdewey@biostat.wisc.edu
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#include <iostream>

#include "bio/alignment/AlphabetScoringMatrix.hh"
#include "bio/alphabet/Nucleotide.hh"
#include "util/options.hh"
#include "filesystem.hh"
using namespace filesystem;
using bio::alignment::AlphabetScoringMatrix;

#include "AlignmentReader.hh"
#include "RecombinationScorer.hh"
#include "PolygonSemiRing.hh"
#include "OrderedPolygon.hh"

const bio::alphabet::Nucleotide GAPPED_DNA("ACGTNMRWSYKVHDB-",
										   "TGCANKYWSRMBDHV-");

IntegerPolygon calculatePolygon(const MultipleAlignment& ma,
								size_t recombinant) {
	typedef IntegerPolygon Element;
	PolygonSemiRing semiRing;
	Element
		match = IntegerVector::unit(2, 0),
		mismatch = IntegerVector(2),
		norecombination = IntegerVector::unit(2, 1),
		recombination = IntegerVector(2);
	
	size_t n = ma.getNumSeqs();
		
	std::vector<Element> initialScores(n, semiRing.getMultiplicativeIdentity());
	
	AlphabetScoringMatrix<Element> emissionScores(GAPPED_DNA, match, mismatch);
	
	util::Matrix<IntegerPolygon> transitionScores(n, n);
	for (size_t i = 0; i < n; ++i) {
		for (size_t j = 0; j < n; ++j) {
			transitionScores(i, j) = (i == j ? norecombination : recombination);
		}
	}

	RecombinationScorer<PolygonSemiRing>
		scorer(semiRing, initialScores, emissionScores, transitionScores);

	return scorer.score(ma, recombinant);
}

const std::string USAGE = "";

const std::string DESCRIPTION =
"Given a multiple alignment and a selected sequence from the multiple "
"alignment to be a putative recombinant, returns the newton polytope "
"of the polynomial generated by the recombination model.  In the resulting "
"polytope, vertices are of the form (matches, norecombinations).";

int main(int argc, const char* argv[]) {
	// Increase speed of input/output to standard streams
	std::ios::sync_with_stdio(false);

	// Set up options and arguments
	size_t recombinant_num = 0;
	std::string recombinant_name = "";
	std::string alignment_filename;
	
	// Set up option parser
	util::options::Parser parser(USAGE, DESCRIPTION);
	parser.addStoreOpt(0, "recombinant",
					   "Number (0-based) of sequence to treat as recombinant",
					   recombinant_num, "INTEGER");
	parser.addStoreOpt(0, "recombinant-name",
					   "Name of sequence to treat as recombinant",
					   recombinant_name, "STRING");
	parser.addStoreArg("alignmentFile",
					   "Alignment file",
					   alignment_filename);
	parser.parse(argv, argv + argc);

	try {
		// Read in alignment
		InputFileStream alignment_file(alignment_filename);
		AlignmentReader reader(alignment_file,
							   recombinant_name, recombinant_num);

		IntegerPolygon p = calculatePolygon(reader.getAlignment(),
											reader.getRecombinantNum());
		
		std::cout << OrderedPolygon<int>(p);

	} catch (const std::runtime_error& e) {
		std::cerr << "Error: " << e.what() << '\n';
		return EXIT_FAILURE;
	}
	
	return EXIT_SUCCESS;
}
